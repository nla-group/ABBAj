var documenterSearchIndex = {"docs":
[{"location":"README/#Julia-ABBA","page":"Julia-ABBA","title":"Julia-ABBA","text":"","category":"section"},{"location":"README/","page":"Julia-ABBA","title":"Julia-ABBA","text":"(Image: License) (Image: Binder)","category":"page"},{"location":"README/","page":"Julia-ABBA","title":"Julia-ABBA","text":"A Julia version of ABBA with parallel k-means implementation","category":"page"},{"location":"README/#Examples","page":"Julia-ABBA","title":"Examples","text":"","category":"section"},{"location":"README/","page":"Julia-ABBA","title":"Julia-ABBA","text":"julia> time_series = load_samples(); # load time series samples \njulia> symbols, model = fit_transform(time_series, 4, 0.1); # use 4 symbols with compressed tolerance of 0.1\njulia> r_time_series = inverse_transform(symbols, model, time_series[1]); # inverse transform time series\njulia> symbols, model = fit_transform(time_series, 4, 0.1, 10); # use 4 symbols with compressed tolerance of 0.1 \n                                                                # and run in parallel kmeans with 10 threads\njulia> r_time_series = inverse_transform(symbols, model, time_series[1]); # inverse transform time series\n","category":"page"},{"location":"README/","page":"Julia-ABBA","title":"Julia-ABBA","text":"(Image: Digitization)","category":"page"},{"location":"README/#Referece","page":"Julia-ABBA","title":"Referece","text":"","category":"section"},{"location":"README/","page":"Julia-ABBA","title":"Julia-ABBA","text":"Elsworth, S., Güttel, S. ABBA: adaptive Brownian bridge-based symbolic aggregation of time series. Data Min Knowl Disc 34, 1175–1200 (2020). https://doi.org/10.1007/s10618-020-00689-6","category":"page"}]
}
